/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ChangeEventInfo } from "./components/pac-input/pac-input";
import { ChangeEventInfo as ChangeEventInfo1 } from "./components/pac-searchbar/pac-searchbar";
export namespace Components {
    interface PacBadge {
        "color": "slate" | "gray" |
          "neutral" | "red" |
          "orange" | "yellow" |
          "green" | "emerald" |
          "teal" | "cyan" | "sky" |
          "blue" | "indigo" | "violet" |
          "purple" | "fuchsia" | "pink" | "rose";
        "effect": "none" | "fast-glow" | "slow-glow";
        "text": string;
    }
    interface PacButton {
        "color": "slate" | "gray" |
          "neutral" | "red" |
          "orange" | "yellow" |
          "green" | "emerald" |
          "teal" | "cyan" | "sky" |
          "blue" | "indigo" | "violet" |
          "purple" | "fuchsia" | "pink" | "rose";
        "enabled": boolean;
        "look": "solid" | "inset" | "clear";
        "size": "small" | "normal" | "large";
    }
    interface PacContainer {
        "color": Color;
        "look": "solid" | "inset";
    }
    interface PacInput {
        "autocompleteMode": AutocompleteMode;
        "enableAutocorrect": Boolean;
        "enableSpellcheck": Boolean;
        "enabled": Boolean;
        "inputDebounce": number;
        "inputMode": typeof HTMLInputElement.prototype.inputMode;
        "inputType": typeof HTMLInputElement.prototype.type;
        "placeholder": string;
        "value": string;
    }
    interface PacLabel {
        "position": "fixed" | "stacked";
    }
    interface PacList {
    }
    interface PacListHeader {
    }
    interface PacListItem {
    }
    interface PacOption {
        "color": Color;
        "enabled": boolean;
        "look": "box" | "inset";
    }
    interface PacProgressBar {
        "busy": boolean;
        "color": Color;
        "indeterminate": boolean;
        "look": "solid" | "compact";
        "value": number;
    }
    interface PacSearchbar {
        "autocompleteMode": AutocompleteMode;
        "cancelButtonColor": Color;
        "cancelButtonText": string;
        "enableAutocorrect": Boolean;
        "enableSpellcheck": Boolean;
        "enabled": Boolean;
        "inputDebounce": number;
        "inputMode": typeof HTMLInputElement.prototype.inputMode;
        "inputType": typeof HTMLInputElement.prototype.type;
        "placeholder": string;
        "searchIconColor": Color;
        "showCancelButton": "never" | "focus" | "always";
        "showClearButton": "never" | "input" | "always";
        "value": string;
    }
    interface PacStatus {
        "color": Color;
        "mode": "off" | "on" | "blinking";
    }
    interface PacTag {
        "color": Color;
        "deletable": boolean;
    }
    interface PacToast {
    }
    interface PacToggle {
        "color": Color;
        "enabled": boolean;
    }
}
declare global {
    interface HTMLPacBadgeElement extends Components.PacBadge, HTMLStencilElement {
    }
    var HTMLPacBadgeElement: {
        prototype: HTMLPacBadgeElement;
        new (): HTMLPacBadgeElement;
    };
    interface HTMLPacButtonElement extends Components.PacButton, HTMLStencilElement {
    }
    var HTMLPacButtonElement: {
        prototype: HTMLPacButtonElement;
        new (): HTMLPacButtonElement;
    };
    interface HTMLPacContainerElement extends Components.PacContainer, HTMLStencilElement {
    }
    var HTMLPacContainerElement: {
        prototype: HTMLPacContainerElement;
        new (): HTMLPacContainerElement;
    };
    interface HTMLPacInputElement extends Components.PacInput, HTMLStencilElement {
    }
    var HTMLPacInputElement: {
        prototype: HTMLPacInputElement;
        new (): HTMLPacInputElement;
    };
    interface HTMLPacLabelElement extends Components.PacLabel, HTMLStencilElement {
    }
    var HTMLPacLabelElement: {
        prototype: HTMLPacLabelElement;
        new (): HTMLPacLabelElement;
    };
    interface HTMLPacListElement extends Components.PacList, HTMLStencilElement {
    }
    var HTMLPacListElement: {
        prototype: HTMLPacListElement;
        new (): HTMLPacListElement;
    };
    interface HTMLPacListHeaderElement extends Components.PacListHeader, HTMLStencilElement {
    }
    var HTMLPacListHeaderElement: {
        prototype: HTMLPacListHeaderElement;
        new (): HTMLPacListHeaderElement;
    };
    interface HTMLPacListItemElement extends Components.PacListItem, HTMLStencilElement {
    }
    var HTMLPacListItemElement: {
        prototype: HTMLPacListItemElement;
        new (): HTMLPacListItemElement;
    };
    interface HTMLPacOptionElement extends Components.PacOption, HTMLStencilElement {
    }
    var HTMLPacOptionElement: {
        prototype: HTMLPacOptionElement;
        new (): HTMLPacOptionElement;
    };
    interface HTMLPacProgressBarElement extends Components.PacProgressBar, HTMLStencilElement {
    }
    var HTMLPacProgressBarElement: {
        prototype: HTMLPacProgressBarElement;
        new (): HTMLPacProgressBarElement;
    };
    interface HTMLPacSearchbarElement extends Components.PacSearchbar, HTMLStencilElement {
    }
    var HTMLPacSearchbarElement: {
        prototype: HTMLPacSearchbarElement;
        new (): HTMLPacSearchbarElement;
    };
    interface HTMLPacStatusElement extends Components.PacStatus, HTMLStencilElement {
    }
    var HTMLPacStatusElement: {
        prototype: HTMLPacStatusElement;
        new (): HTMLPacStatusElement;
    };
    interface HTMLPacTagElement extends Components.PacTag, HTMLStencilElement {
    }
    var HTMLPacTagElement: {
        prototype: HTMLPacTagElement;
        new (): HTMLPacTagElement;
    };
    interface HTMLPacToastElement extends Components.PacToast, HTMLStencilElement {
    }
    var HTMLPacToastElement: {
        prototype: HTMLPacToastElement;
        new (): HTMLPacToastElement;
    };
    interface HTMLPacToggleElement extends Components.PacToggle, HTMLStencilElement {
    }
    var HTMLPacToggleElement: {
        prototype: HTMLPacToggleElement;
        new (): HTMLPacToggleElement;
    };
    interface HTMLElementTagNameMap {
        "pac-badge": HTMLPacBadgeElement;
        "pac-button": HTMLPacButtonElement;
        "pac-container": HTMLPacContainerElement;
        "pac-input": HTMLPacInputElement;
        "pac-label": HTMLPacLabelElement;
        "pac-list": HTMLPacListElement;
        "pac-list-header": HTMLPacListHeaderElement;
        "pac-list-item": HTMLPacListItemElement;
        "pac-option": HTMLPacOptionElement;
        "pac-progress-bar": HTMLPacProgressBarElement;
        "pac-searchbar": HTMLPacSearchbarElement;
        "pac-status": HTMLPacStatusElement;
        "pac-tag": HTMLPacTagElement;
        "pac-toast": HTMLPacToastElement;
        "pac-toggle": HTMLPacToggleElement;
    }
}
declare namespace LocalJSX {
    interface PacBadge {
        "color"?: "slate" | "gray" |
          "neutral" | "red" |
          "orange" | "yellow" |
          "green" | "emerald" |
          "teal" | "cyan" | "sky" |
          "blue" | "indigo" | "violet" |
          "purple" | "fuchsia" | "pink" | "rose";
        "effect"?: "none" | "fast-glow" | "slow-glow";
        "text"?: string;
    }
    interface PacButton {
        "color"?: "slate" | "gray" |
          "neutral" | "red" |
          "orange" | "yellow" |
          "green" | "emerald" |
          "teal" | "cyan" | "sky" |
          "blue" | "indigo" | "violet" |
          "purple" | "fuchsia" | "pink" | "rose";
        "enabled"?: boolean;
        "look"?: "solid" | "inset" | "clear";
        "size"?: "small" | "normal" | "large";
    }
    interface PacContainer {
        "color"?: Color;
        "look"?: "solid" | "inset";
    }
    interface PacInput {
        "autocompleteMode"?: AutocompleteMode;
        "enableAutocorrect"?: Boolean;
        "enableSpellcheck"?: Boolean;
        "enabled"?: Boolean;
        "inputDebounce"?: number;
        "inputMode"?: typeof HTMLInputElement.prototype.inputMode;
        "inputType"?: typeof HTMLInputElement.prototype.type;
        "onPacBlur"?: (event: CustomEvent<void>) => void;
        "onPacCancel"?: (event: CustomEvent<void>) => void;
        "onPacChange"?: (event: CustomEvent<ChangeEventInfo>) => void;
        "onPacClear"?: (event: CustomEvent<void>) => void;
        "onPacFocus"?: (event: CustomEvent<void>) => void;
        "onPacInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface PacLabel {
        "position"?: "fixed" | "stacked";
    }
    interface PacList {
    }
    interface PacListHeader {
    }
    interface PacListItem {
    }
    interface PacOption {
        "color"?: Color;
        "enabled"?: boolean;
        "look"?: "box" | "inset";
        "onPacToggle"?: (event: CustomEvent<boolean>) => void;
    }
    interface PacProgressBar {
        "busy"?: boolean;
        "color"?: Color;
        "indeterminate"?: boolean;
        "look"?: "solid" | "compact";
        "value"?: number;
    }
    interface PacSearchbar {
        "autocompleteMode"?: AutocompleteMode;
        "cancelButtonColor"?: Color;
        "cancelButtonText"?: string;
        "enableAutocorrect"?: Boolean;
        "enableSpellcheck"?: Boolean;
        "enabled"?: Boolean;
        "inputDebounce"?: number;
        "inputMode"?: typeof HTMLInputElement.prototype.inputMode;
        "inputType"?: typeof HTMLInputElement.prototype.type;
        "onPacBlur"?: (event: CustomEvent<void>) => void;
        "onPacCancel"?: (event: CustomEvent<void>) => void;
        "onPacChange"?: (event: CustomEvent<ChangeEventInfo>) => void;
        "onPacClear"?: (event: CustomEvent<void>) => void;
        "onPacFocus"?: (event: CustomEvent<void>) => void;
        "onPacInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        "placeholder"?: string;
        "searchIconColor"?: Color;
        "showCancelButton"?: "never" | "focus" | "always";
        "showClearButton"?: "never" | "input" | "always";
        "value"?: string;
    }
    interface PacStatus {
        "color"?: Color;
        "mode"?: "off" | "on" | "blinking";
    }
    interface PacTag {
        "color"?: Color;
        "deletable"?: boolean;
        "onPacRemove"?: (event: CustomEvent<void>) => void;
    }
    interface PacToast {
    }
    interface PacToggle {
        "color"?: Color;
        "enabled"?: boolean;
        "onPacToggle"?: (event: CustomEvent<boolean>) => void;
    }
    interface IntrinsicElements {
        "pac-badge": PacBadge;
        "pac-button": PacButton;
        "pac-container": PacContainer;
        "pac-input": PacInput;
        "pac-label": PacLabel;
        "pac-list": PacList;
        "pac-list-header": PacListHeader;
        "pac-list-item": PacListItem;
        "pac-option": PacOption;
        "pac-progress-bar": PacProgressBar;
        "pac-searchbar": PacSearchbar;
        "pac-status": PacStatus;
        "pac-tag": PacTag;
        "pac-toast": PacToast;
        "pac-toggle": PacToggle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "pac-badge": LocalJSX.PacBadge & JSXBase.HTMLAttributes<HTMLPacBadgeElement>;
            "pac-button": LocalJSX.PacButton & JSXBase.HTMLAttributes<HTMLPacButtonElement>;
            "pac-container": LocalJSX.PacContainer & JSXBase.HTMLAttributes<HTMLPacContainerElement>;
            "pac-input": LocalJSX.PacInput & JSXBase.HTMLAttributes<HTMLPacInputElement>;
            "pac-label": LocalJSX.PacLabel & JSXBase.HTMLAttributes<HTMLPacLabelElement>;
            "pac-list": LocalJSX.PacList & JSXBase.HTMLAttributes<HTMLPacListElement>;
            "pac-list-header": LocalJSX.PacListHeader & JSXBase.HTMLAttributes<HTMLPacListHeaderElement>;
            "pac-list-item": LocalJSX.PacListItem & JSXBase.HTMLAttributes<HTMLPacListItemElement>;
            "pac-option": LocalJSX.PacOption & JSXBase.HTMLAttributes<HTMLPacOptionElement>;
            "pac-progress-bar": LocalJSX.PacProgressBar & JSXBase.HTMLAttributes<HTMLPacProgressBarElement>;
            "pac-searchbar": LocalJSX.PacSearchbar & JSXBase.HTMLAttributes<HTMLPacSearchbarElement>;
            "pac-status": LocalJSX.PacStatus & JSXBase.HTMLAttributes<HTMLPacStatusElement>;
            "pac-tag": LocalJSX.PacTag & JSXBase.HTMLAttributes<HTMLPacTagElement>;
            "pac-toast": LocalJSX.PacToast & JSXBase.HTMLAttributes<HTMLPacToastElement>;
            "pac-toggle": LocalJSX.PacToggle & JSXBase.HTMLAttributes<HTMLPacToggleElement>;
        }
    }
}
